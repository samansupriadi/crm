name: CI AND CD

on:
  push:
    branches: ["test"]
  pull_request:
    branches: ["development", "demo", "staging", "main"]
    types: ["closed"] #Run workflows jika ada event PR lalu close pada branch

jobs:
  set_target_env:
    if: github.event.pull_request.merged
    name: Define Environment
    runs-on: ubuntu-latest
    outputs:
      env_app: ${{ steps.set_env.outputs.env_value }}
      versions_app: ${{ steps.set_env.outputs.version }}
      status: ${{ steps.set_env.outputs.status }}
    steps:
      - id: set_env
        run: |
          envv=${{ github.ref_name == 'development' && 'development' || github.ref_name == 'staging-qa' && 'staging' || github.ref_name == 'main' && 'production' || 0 }}
          version=0
          status=0

          ## set version
          if [[ "$envv" != "0" ]] && [[ "$envv" != "production" ]]
          then
            version=`date +%Y.%m.%d`"-$envv-${GITHUB_SHA::7}"
          elif [[ "$envv" != "0" ]] && [[ "$envv" == "production" ]]
          then
            #version=`date +%Y.%m.%d`"-$envv-${GITHUB_REF#refs/tags/}}"
            version=`date +%Y.%m.%d`"-$envv-${GITHUB_SHA::7}"
          fi

          ## set status
          if [[ "$envv" != "0" ]] && [[ "$version" != "0" ]]
          then
            status=1
          fi
          
          echo "env_value=$envv" >> "$GITHUB_OUTPUT"
          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "status=$status" >> "$GITHUB_OUTPUT"
          echo "Status $status"
          
  # code-quality:
  #   needs: set_target_env
  #   if: needs.set_target_env.outputs.status != '0'
  #   name: Scan with SonarQube
  #   environment:
  #     name: ${{ needs.set_target_env.outputs.env_app }} 
  #   runs-on: ubuntu-latest
  #   env:
  #     SONAR_EXCLUSIONS: '**/*.html,**/*.phtml,**/*.css,**/*.js'
  #     SONAR_SOURCES: src
  #   continue-on-error: true
  #   steps:
  #     - name: test
  #       run: echo ${{ needs.set_target_env.outputs.status }}
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: SonarQube Scan
  #       uses: sonarsource/sonarqube-scan-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #         projectBaseDir: "src/"
  #       with:
  #         args: 
  #           -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}_${{ github.ref_name }}
  #           -Dsonar.exclusions=${{ env.SONAR_EXCLUSIONS }}
  #           -Dsonar.sources=${{ env.SONAR_SOURCES }}
  #           -Dsonar.qualitygate.wait=true
  #           -Dsonar.qualitygate.timeout=900


# #job ini akan selalu di jalankan ketika ada event PR ke branch yg telah di tentukan
#   Unit-Test:
#     needs: set_target_env
#     if: needs.set_target_env.outputs.status != '0'
#     name: Run tests
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         shell: bash
#         working-directory: ./src
#     steps:
#       - name: Setup up php version
#         uses: shivammathur/setup-php@v2
#         with:
#           php-version: '8.3'
#       - name: Checkout Repository
#         uses: actions/checkout@v4
#       - name: Copy .env
#         run: php -r "file_exists('.env') || copy('.env.example', '.env');"
#       - name: Install Dependencies
#         run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
#       - name: Generate key
#         run: php artisan key:generate
#       - name: Directory Permissions
#         run: chmod -R 777 storage bootstrap/cache
#       - name: Create Database
#         run: |
#           mkdir -p database
#           touch database/database.sqlite
#       - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
#         env:
#           DB_CONNECTION: sqlite
#           DB_DATABASE: database/database.sqlite
#         run: php artisan test

  # #job ini akan selalu di jalankan ketika ada event PR dan merge ke branch yg telah di tentukan
  # Build-and-publish-image:
  #   if: needs.set_target_env.outputs.status != '0'
  #   needs: ["set_target_env", "code-quality", "Unit-Test"]
  #   name: Build and publish docker image
  #   environment:
  #     name: ${{ needs.set_target_env.outputs.env_app }}    
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ needs.set_target_env.outputs.versions_app}}

  #job ini akan selalu di jalankan ketika ada event PR dan merge ke branch yg telah di tentukan
  Deploy:
    #needs: ["set_target_env", "Build-and-publish-image"]
    needs: ["set_target_env"]
    if: needs.set_target_env.outputs.status != '0'
    name: Deploy apps
    environment:
      name: ${{ needs.set_target_env.outputs.env_app }} 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get workflow ID
        id: get_workflow_id
        run: |
          workflow_id=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" \
            https://api.github.com/repos/${{ vars.REPO_OPS }}/actions/workflows/${{ vars.FILE_TO_TRIGER1 }} | jq -r '.id')

          if ! [[ "$workflow_id" =~ ^[0-9]+$ ]]; then
            echo "error: Cant get workflow id in the OPS repo" >&2
            exit 1
          fi
          
          echo "$workflow_id"
          echo "workflow_id=$workflow_id" >> "$GITHUB_OUTPUT"
         

      # - name: Triger to OPS repo ${{ vars.REPO_OPS }}
      #   id: trigger
      #   run: |
      #     curl -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" \
      #       -H 'Accept: application/vnd.github.everest-preview+json' \
      #       "https://api.github.com/repos/samansupriadi/crm-ops/dispatches" \
      #       -d '{
      #             "event_type": "${{ needs.set_target_env.outputs.env_app }}",
      #             "client_payload":
      #                {
      #                   "environment":  " ${{ needs.set_target_env.outputs.env_app }}",
      #                   "APP_NAME":     "${{ github.event.repository.name }}-services", 
      #                   "version":      "${{ needs.set_target_env.outputs.versions_app }}",
      #                 }
      #           }'

  # #job ini akan selalu di jalankan ketika ada event PR dan merge ke branch yg telah di tentukan
  # zap_scan:
  #   name: Scan the web application
  #   needs: Deploy
  #   runs-on: ubuntu-latest
  #   permissions:
  #     issues: write #create issue
  #     attestations: write #upload artifacts
  #   steps:
  #     - name: ZAP Scan
  #       uses: zaproxy/action-baseline@v0.12.0
  #       with:
  #         target: 'https://hrmis.neuron.id'
  #         docker_name: 'ghcr.io/zaproxy/zaproxy:stable'


      

     