name: CI AND CD

on:
  push:
    branches:
      - demo
  pull_request:
    types: [closed]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    env:
      SONAR_EXCLUSIONS: '**/*.html,**/*.phtml,**/*.css,**/*.js'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          projectBaseDir: "src/"
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}_${{ github.ref_name }}
            -Dsonar.exclusions=${{ env.SONAR_EXCLUSIONS }}

  Unit-Test:
    name: Run tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./src
    steps:
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
      - uses: actions/checkout@v4
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Create Database
        run: |
          mkdir -p database
          touch database/database.sqlite
      - name: Execute tests (Unit and Feature tests) via PHPUnit/Pest
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan test
      
  Build-and-publish-image:
    needs: ["code-quality", "Unit-Test"]
    runs-on: ubuntu-latest
    steps:
      - name: Image Version
        run: echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/app:${{ env.TIMESTAMP }}
  
  Deploy:
    needs: Build-and-publish-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

  zap_scan:
    #needs: Deploy
    name: Scan the webapplication
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: 'https://www.zaproxy.org'
          contextFile: '$GITHUB_WORKSPACE/zap/zap.yaml'


      

     